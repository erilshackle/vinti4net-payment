{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83d\udcdd Vinti4Net PHP SDK Documentation Sum\u00e1rio \ud83d\udcdd Vinti4Net PHP SDK Documentation Sum\u00e1rio Introdu\u00e7\u00e3o Instala\u00e7\u00e3o Conceitos Principais Configura\u00e7\u00e3o e Inicializa\u00e7\u00e3o Criando Pagamentos Compra (TransactionCode='1') Pagamento de Servi\u00e7o (TransactionCode='2') Recarga (TransactionCode='3') Processando Callback/Resposta Tratamento de Erros e Exce\u00e7\u00f5es Classes e M\u00e9todos PaymentClient PaymentRequest PaymentResult Contribui\u00e7\u00e3o Licen\u00e7a Introdu\u00e7\u00e3o O Vinti4Net PHP SDK fornece uma integra\u00e7\u00e3o segura com o Vinti4Net Payment Gateway , encapsulando toda a l\u00f3gica de: Fingerprint Request & Response PurchaseRequest 3DS Valida\u00e7\u00e3o de Callback O SDK \u00e9 compat\u00edvel com PHP 8.1+ e foi desenvolvido para simplificar fluxos de pagamento em aplicativos PHP. Instala\u00e7\u00e3o composer require erilshk/vinti4net-payment Conceitos Principais Conceito Descri\u00e7\u00e3o PaymentClient Classe principal que gerencia todas as transa\u00e7\u00f5es. PaymentRequest DTO que representa uma requisi\u00e7\u00e3o de pagamento (amount, billing, etc). PaymentResult Resultado da transa\u00e7\u00e3o, incluindo status, mensagem e dados do callback. FingerPrint Token de seguran\u00e7a calculado para Request e Response. PurchaseRequest Payload de 3DS para valida\u00e7\u00e3o de compras. Configura\u00e7\u00e3o e Inicializa\u00e7\u00e3o use Erilshk\\Vinti4Net\\PaymentClient; $client = new PaymentClient('VINTI4_POS_ID', 'VINTI4_POS_AUTCODE'); // Ambiente de teste (opcional) $client_test = new PaymentClient('VINTI4_POS_ID', 'VINTI4_POS_AUTCODE', 'https://3dsteste.vinti4net.cv/endpoint.php'); Criando Pagamentos Compra (TransactionCode='1') $request = $client->createPurchasePayment(1500.00, 'https://seuapp.cv/callback-vinti4', [ 'user' => [ 'email' => 'cliente@exemplo.com', 'country' => '132', 'city' => 'Praia', 'address' => 'Av. Cidade de Lisboa, 12', 'postalCode' => '7600' ] ]); echo $client->renderPaymentForm($request); exit; Pagamento de Servi\u00e7o (TransactionCode='2') $serviceRequest = $client->createServicePayment( 500.00, 'https://seuapp.cv/callback-vinti4', 'FAT123', // entityCode '123456789' // reference ); echo $client->renderPaymentForm($serviceRequest); exit; Recarga (TransactionCode='3') $rechargeRequest = $client->createRechargePayment( 200.00, 'https://seuapp.cv/callback-vinti4', 'OP123', // entityCode '9876545' // referenceNumber ); echo $client->renderPaymentForm($rechargeRequest); exit; Processando Callback/Resposta $result = $client->processResponse($_POST); if ($result->succeeded()) { echo \"Pagamento aprovado: \" . $result->data['merchantRespMerchantRef']; echo $result->generateReceipt(); } elseif ($result->status === $result::STATUS_FINGERPRINT_INVALID) { error_log(\"Falha de seguran\u00e7a: \" . $result->message); } else { echo \"Pagamento falhou ou cancelado. Status: {$result->status}\"; } Tratamento de Erros e Exce\u00e7\u00f5es Exce\u00e7\u00e3o Descri\u00e7\u00e3o ValidationException Campos obrigat\u00f3rios ausentes ou incorretos. PaymentException Erros internos do SDK. try { echo $client->renderPaymentForm($request); } catch (ValidationException $e) { echo \"Erro de valida\u00e7\u00e3o: \" . $e->getMessage(); } catch (\\Exception $e) { echo \"Erro inesperado: \" . $e->getMessage(); } Classes e M\u00e9todos PaymentClient M\u00e9todo Descri\u00e7\u00e3o createPurchasePayment() Cria requisi\u00e7\u00e3o de compra (3DS obrigat\u00f3rio). createServicePayment() Cria requisi\u00e7\u00e3o de pagamento de servi\u00e7o. createRechargePayment() Cria requisi\u00e7\u00e3o de recarga de telem\u00f3vel. renderPaymentForm() Retorna formul\u00e1rio HTML auto-submiss\u00edvel. processResponse() Valida callback e retorna PaymentResult. PaymentRequest merchantRef merchantSession merchantSession setBilling(array $billingData) PaymentResult succeeded(): bool generateReceipt(): string status message data Contribui\u00e7\u00e3o Abra uma Issue . Fa\u00e7a um Fork do projeto. Envie um Pull Request testado. Licen\u00e7a MIT License \u2013 livre para uso em qualquer projeto.","title":"Home"},{"location":"#vinti4net-php-sdk-documentation","text":"","title":"\ud83d\udcdd Vinti4Net PHP SDK Documentation"},{"location":"#sumario","text":"\ud83d\udcdd Vinti4Net PHP SDK Documentation Sum\u00e1rio Introdu\u00e7\u00e3o Instala\u00e7\u00e3o Conceitos Principais Configura\u00e7\u00e3o e Inicializa\u00e7\u00e3o Criando Pagamentos Compra (TransactionCode='1') Pagamento de Servi\u00e7o (TransactionCode='2') Recarga (TransactionCode='3') Processando Callback/Resposta Tratamento de Erros e Exce\u00e7\u00f5es Classes e M\u00e9todos PaymentClient PaymentRequest PaymentResult Contribui\u00e7\u00e3o Licen\u00e7a","title":"Sum\u00e1rio"},{"location":"#introducao","text":"O Vinti4Net PHP SDK fornece uma integra\u00e7\u00e3o segura com o Vinti4Net Payment Gateway , encapsulando toda a l\u00f3gica de: Fingerprint Request & Response PurchaseRequest 3DS Valida\u00e7\u00e3o de Callback O SDK \u00e9 compat\u00edvel com PHP 8.1+ e foi desenvolvido para simplificar fluxos de pagamento em aplicativos PHP.","title":"Introdu\u00e7\u00e3o"},{"location":"#instalacao","text":"composer require erilshk/vinti4net-payment","title":"Instala\u00e7\u00e3o"},{"location":"#conceitos-principais","text":"Conceito Descri\u00e7\u00e3o PaymentClient Classe principal que gerencia todas as transa\u00e7\u00f5es. PaymentRequest DTO que representa uma requisi\u00e7\u00e3o de pagamento (amount, billing, etc). PaymentResult Resultado da transa\u00e7\u00e3o, incluindo status, mensagem e dados do callback. FingerPrint Token de seguran\u00e7a calculado para Request e Response. PurchaseRequest Payload de 3DS para valida\u00e7\u00e3o de compras.","title":"Conceitos Principais"},{"location":"#configuracao-e-inicializacao","text":"use Erilshk\\Vinti4Net\\PaymentClient; $client = new PaymentClient('VINTI4_POS_ID', 'VINTI4_POS_AUTCODE'); // Ambiente de teste (opcional) $client_test = new PaymentClient('VINTI4_POS_ID', 'VINTI4_POS_AUTCODE', 'https://3dsteste.vinti4net.cv/endpoint.php');","title":"Configura\u00e7\u00e3o e Inicializa\u00e7\u00e3o"},{"location":"#criando-pagamentos","text":"","title":"Criando Pagamentos"},{"location":"#compra-transactioncode1","text":"$request = $client->createPurchasePayment(1500.00, 'https://seuapp.cv/callback-vinti4', [ 'user' => [ 'email' => 'cliente@exemplo.com', 'country' => '132', 'city' => 'Praia', 'address' => 'Av. Cidade de Lisboa, 12', 'postalCode' => '7600' ] ]); echo $client->renderPaymentForm($request); exit;","title":"Compra (TransactionCode='1')"},{"location":"#pagamento-de-servico-transactioncode2","text":"$serviceRequest = $client->createServicePayment( 500.00, 'https://seuapp.cv/callback-vinti4', 'FAT123', // entityCode '123456789' // reference ); echo $client->renderPaymentForm($serviceRequest); exit;","title":"Pagamento de Servi\u00e7o (TransactionCode='2')"},{"location":"#recarga-transactioncode3","text":"$rechargeRequest = $client->createRechargePayment( 200.00, 'https://seuapp.cv/callback-vinti4', 'OP123', // entityCode '9876545' // referenceNumber ); echo $client->renderPaymentForm($rechargeRequest); exit;","title":"Recarga (TransactionCode='3')"},{"location":"#processando-callbackresposta","text":"$result = $client->processResponse($_POST); if ($result->succeeded()) { echo \"Pagamento aprovado: \" . $result->data['merchantRespMerchantRef']; echo $result->generateReceipt(); } elseif ($result->status === $result::STATUS_FINGERPRINT_INVALID) { error_log(\"Falha de seguran\u00e7a: \" . $result->message); } else { echo \"Pagamento falhou ou cancelado. Status: {$result->status}\"; }","title":"Processando Callback/Resposta"},{"location":"#tratamento-de-erros-e-excecoes","text":"Exce\u00e7\u00e3o Descri\u00e7\u00e3o ValidationException Campos obrigat\u00f3rios ausentes ou incorretos. PaymentException Erros internos do SDK. try { echo $client->renderPaymentForm($request); } catch (ValidationException $e) { echo \"Erro de valida\u00e7\u00e3o: \" . $e->getMessage(); } catch (\\Exception $e) { echo \"Erro inesperado: \" . $e->getMessage(); }","title":"Tratamento de Erros e Exce\u00e7\u00f5es"},{"location":"#classes-e-metodos","text":"","title":"Classes e M\u00e9todos"},{"location":"#paymentclient","text":"M\u00e9todo Descri\u00e7\u00e3o createPurchasePayment() Cria requisi\u00e7\u00e3o de compra (3DS obrigat\u00f3rio). createServicePayment() Cria requisi\u00e7\u00e3o de pagamento de servi\u00e7o. createRechargePayment() Cria requisi\u00e7\u00e3o de recarga de telem\u00f3vel. renderPaymentForm() Retorna formul\u00e1rio HTML auto-submiss\u00edvel. processResponse() Valida callback e retorna PaymentResult.","title":"PaymentClient"},{"location":"#paymentrequest","text":"merchantRef merchantSession merchantSession setBilling(array $billingData)","title":"PaymentRequest"},{"location":"#paymentresult","text":"succeeded(): bool generateReceipt(): string status message data","title":"PaymentResult"},{"location":"#contribuicao","text":"Abra uma Issue . Fa\u00e7a um Fork do projeto. Envie um Pull Request testado.","title":"Contribui\u00e7\u00e3o"},{"location":"#licenca","text":"MIT License \u2013 livre para uso em qualquer projeto.","title":"Licen\u00e7a"},{"location":"callback/","text":"\ud83d\udd04 Processamento de Callback A URL definida em responseUrl receber\u00e1 o POST do Vinti4Net. 1\ufe0f\u20e3 Processando a Resposta use Erilshk\\Vinti4Net\\PaymentClient; $client = new PaymentClient(posId: 'VINTI4_POS_ID', posAutCode: 'VINTI4_POS_AUTCODE'); // Processa o POST enviado pelo gateway $result = $client->processResponse($_POST); 2\ufe0f\u20e3 Verificando o Resultado if ($result->succeeded()) { echo \"Pagamento aprovado!\"; $referencia = $result->data['merchantRespMerchantRef']; echo $result->generateReceipt(); // opcional } elseif ($result->status === $result::STATUS_FINGERPRINT_INVALID) { error_log(\"Falha de seguran\u00e7a: Fingerprint inv\u00e1lido!\"); } else { echo \"Pagamento falhou ou foi cancelado.\"; echo $result->message; } 3\ufe0f\u20e3 Observa\u00e7\u00f5es Sempre verifique o FingerPrint com hash_equals . Atualize o status do pedido ou recarga apenas se succeeded() for true . Para seguran\u00e7a, trate STATUS_FINGERPRINT_INVALID como fraude em potencial.","title":"Callback"},{"location":"callback/#processamento-de-callback","text":"A URL definida em responseUrl receber\u00e1 o POST do Vinti4Net.","title":"\ud83d\udd04 Processamento de Callback"},{"location":"callback/#1-processando-a-resposta","text":"use Erilshk\\Vinti4Net\\PaymentClient; $client = new PaymentClient(posId: 'VINTI4_POS_ID', posAutCode: 'VINTI4_POS_AUTCODE'); // Processa o POST enviado pelo gateway $result = $client->processResponse($_POST);","title":"1\ufe0f\u20e3 Processando a Resposta"},{"location":"callback/#2-verificando-o-resultado","text":"if ($result->succeeded()) { echo \"Pagamento aprovado!\"; $referencia = $result->data['merchantRespMerchantRef']; echo $result->generateReceipt(); // opcional } elseif ($result->status === $result::STATUS_FINGERPRINT_INVALID) { error_log(\"Falha de seguran\u00e7a: Fingerprint inv\u00e1lido!\"); } else { echo \"Pagamento falhou ou foi cancelado.\"; echo $result->message; }","title":"2\ufe0f\u20e3 Verificando o Resultado"},{"location":"callback/#3-observacoes","text":"Sempre verifique o FingerPrint com hash_equals . Atualize o status do pedido ou recarga apenas se succeeded() for true . Para seguran\u00e7a, trate STATUS_FINGERPRINT_INVALID como fraude em potencial.","title":"3\ufe0f\u20e3 Observa\u00e7\u00f5es"},{"location":"classes/","text":"Perfeito \ud83d\udc4c \u2014 agora entramos na parte t\u00e9cnica da documenta\u00e7\u00e3o das classes PHP , que vai dentro da pasta docs/classes/ e pode ser linkada no menu do mkdocs.yml . Vamos fazer isso de forma profissional, semelhante \u00e0 doc oficial do Laravel, Symfony ou Stripe SDK, com explica\u00e7\u00e3o e exemplos r\u00e1pidos por classe. \ud83d\udcc1 Estrutura sugerida docs/ \u251c\u2500\u2500 index.md \u251c\u2500\u2500 01-compra.md \u251c\u2500\u2500 02-pagamento-servico.md \u251c\u2500\u2500 03-recarga.md \u251c\u2500\u2500 04-callback.md \u2514\u2500\u2500 classes/ \u251c\u2500\u2500 PaymentClient.md \u251c\u2500\u2500 PaymentRequest.md \u251c\u2500\u2500 PaymentResult.md \u251c\u2500\u2500 Fingerprint.md \u2514\u2500\u2500 Exceptions.md docs/classes/PaymentClient.md # \ud83d\udcbc Classe: `PaymentClient` Classe principal para comunica\u00e7\u00e3o com o **Vinti4Net Gateway**. Respons\u00e1vel por gerar fingerprints, renderizar formul\u00e1rios e validar callbacks. --- ## \ud83e\udde9 Namespace ```php use Erilshk\\Vinti4Net\\PaymentClient; \ud83d\udd27 Construtor __construct(string $posID, string $posAutCode, ?string $endpoint = null) Par\u00e2metros Nome Tipo Descri\u00e7\u00e3o $posID string Identificador do terminal (POS ID) fornecido pela SISP $posAutCode string C\u00f3digo secreto de autentica\u00e7\u00e3o $endpoint string null (Opcional) URL do endpoint \u2014 usa produ\u00e7\u00e3o por padr\u00e3o \ud83e\uddfe M\u00e9todos Principais renderPaymentForm(PaymentRequest $request): string Gera o HTML completo de submiss\u00e3o para o gateway. echo $client->renderPaymentForm($request); processResponse(array $postData): PaymentResult Processa e valida os dados recebidos no callback do Vinti4Net. $result = $client->processResponse($_POST); createServicePayment(float $amount, string $responseUrl, string $entityCode, string $referenceNumber): PaymentRequest Cria uma requisi\u00e7\u00e3o de Pagamento de Servi\u00e7o . createRechargePayment(float $amount, string $responseUrl, string $entityCode, string $referenceNumber): PaymentRequest Cria uma requisi\u00e7\u00e3o de Recarga . verifyFingerprint(array $data, string $fingerprint): bool Valida a integridade de um Fingerprint recebido do gateway. \u2699\ufe0f Exemplo Completo $client = new PaymentClient('90000443', 'ABCDE12345'); $request = $client->createServicePayment(500, 'https://meusite.cv/callback', '123', '987654'); echo $client->renderPaymentForm($request); --- ### `docs/classes/PaymentRequest.md` ```markdown # \ud83e\uddfe Classe: `PaymentRequest` Objeto DTO (Data Transfer Object) que encapsula os dados de uma transa\u00e7\u00e3o. --- ## \ud83e\udde9 Namespace ```php use Erilshk\\Vinti4Net\\PaymentRequest; \ud83d\udd27 Construtor __construct(int|float|string $amount, string $responseUrl, int|string $transactionCode) Par\u00e2metro Tipo Descri\u00e7\u00e3o $amount float string Valor da transa\u00e7\u00e3o $responseUrl string URL que receber\u00e1 o POST de retorno $transactionCode string int Tipo da transa\u00e7\u00e3o: 1 (Compra), 2 (Servi\u00e7o), 3 (Recarga) \ud83e\uddf1 Propriedades Propriedade Tipo Descri\u00e7\u00e3o $amount string Valor da transa\u00e7\u00e3o $transactionCode string Tipo da transa\u00e7\u00e3o $responseUrl string URL de callback $merchantRef string Refer\u00eancia \u00fanica da loja $merchantSession string Sess\u00e3o \u00fanica da loja $entityCode ?string C\u00f3digo da entidade (Servi\u00e7os/Recarga) $referenceNumber ?string N\u00famero de refer\u00eancia $billingData array Dados de cobran\u00e7a (3DS) \ud83e\udde9 M\u00e9todos setBilling(string $email, string $country, string $city, string $address, string $postalCode, array $acctInfo = [], array $aditionals = []): self Define os dados de cobran\u00e7a para 3D Secure. $request->setBilling( 'cliente@exemplo.com', '132', 'Praia', 'Av. Cidade de Lisboa, 12', '7600' ); --- ### `docs/classes/PaymentResult.md` ```markdown # \ud83d\udcc4 Classe: `PaymentResult` DTO para padronizar o resultado do processamento da resposta do Vinti4Net. --- ## \ud83e\udde9 Namespace ```php use Erilshk\\Vinti4Net\\PaymentResult; \ud83d\udd27 Construtor __construct(string $status, string $message, bool $isSuccessful, array $data, array $debugInfo = []) \ud83e\uddf1 Propriedades Nome Tipo Descri\u00e7\u00e3o $status string Status da transa\u00e7\u00e3o $message string Mensagem do sistema $isSuccessful bool Indica se o pagamento foi bem-sucedido $data array Dados brutos da resposta $debugInfo array Informa\u00e7\u00f5es internas \u00fateis para log \ud83d\udea6 M\u00e9todos isValid(): bool Verifica se o status \u00e9 reconhecido. succeeded(): bool Retorna true se a transa\u00e7\u00e3o foi bem-sucedida. failed(): bool Retorna true se a transa\u00e7\u00e3o falhou. generateReceipt(): string Gera um HTML simples com o recibo do pagamento. echo $result->generateReceipt(); --- ### `docs/classes/Fingerprint.md` ```markdown # \ud83d\udd10 Classe: `Fingerprint` Classe utilit\u00e1ria para gera\u00e7\u00e3o e valida\u00e7\u00e3o de fingerprints. --- ## \ud83e\udde9 Namespace ```php use Erilshk\\Vinti4Net\\Fingerprint; \ud83e\udde9 M\u00e9todos generate(array $fields, string $posAutCode): string Gera o hash FingerPrint para envio de requisi\u00e7\u00e3o. validate(array $fields, string $posAutCode, string $received): bool Valida um fingerprint recebido no callback. $isValid = Fingerprint::validate($_POST, 'SEU_POS_AUT_CODE', $_POST['FingerPrint']); --- ### `docs/classes/Exceptions.md` ```markdown # \u26a0\ufe0f Exce\u00e7\u00f5es O SDK lan\u00e7a exce\u00e7\u00f5es espec\u00edficas para diferenciar erros de dados e falhas internas. --- ## `ValidationException` > Namespace: `Erilshk\\Vinti4Net\\Exception\\ValidationException` Lan\u00e7ada quando campos obrigat\u00f3rios est\u00e3o ausentes ou incorretos. ```php throw new ValidationException(\"BillingData ausente para transa\u00e7\u00e3o de compra.\"); PaymentException Namespace: Erilshk\\Vinti4Net\\Exception\\PaymentException Lan\u00e7ada em falhas internas do SDK, como erro ao gerar Fingerprint ou codificar JSON. --- Se quiser, posso agora **gerar o `mkdocs.yml` completo** com menu hier\u00e1rquico: - \u201cGuia R\u00e1pido\u201d (Compra, Recarga, etc.) - \u201cRefer\u00eancia de Classes\u201d (PaymentClient, Request, Result, etc.) Quer que eu monte o `mkdocs.yml` com tudo pronto e bonito (com Material for MkDocs)?","title":"Classes"},{"location":"classes/#estrutura-sugerida","text":"docs/ \u251c\u2500\u2500 index.md \u251c\u2500\u2500 01-compra.md \u251c\u2500\u2500 02-pagamento-servico.md \u251c\u2500\u2500 03-recarga.md \u251c\u2500\u2500 04-callback.md \u2514\u2500\u2500 classes/ \u251c\u2500\u2500 PaymentClient.md \u251c\u2500\u2500 PaymentRequest.md \u251c\u2500\u2500 PaymentResult.md \u251c\u2500\u2500 Fingerprint.md \u2514\u2500\u2500 Exceptions.md","title":"\ud83d\udcc1 Estrutura sugerida"},{"location":"classes/#docsclassespaymentclientmd","text":"# \ud83d\udcbc Classe: `PaymentClient` Classe principal para comunica\u00e7\u00e3o com o **Vinti4Net Gateway**. Respons\u00e1vel por gerar fingerprints, renderizar formul\u00e1rios e validar callbacks. --- ## \ud83e\udde9 Namespace ```php use Erilshk\\Vinti4Net\\PaymentClient;","title":"docs/classes/PaymentClient.md"},{"location":"classes/#construtor","text":"__construct(string $posID, string $posAutCode, ?string $endpoint = null) Par\u00e2metros Nome Tipo Descri\u00e7\u00e3o $posID string Identificador do terminal (POS ID) fornecido pela SISP $posAutCode string C\u00f3digo secreto de autentica\u00e7\u00e3o $endpoint string null (Opcional) URL do endpoint \u2014 usa produ\u00e7\u00e3o por padr\u00e3o","title":"\ud83d\udd27 Construtor"},{"location":"classes/#metodos-principais","text":"","title":"\ud83e\uddfe M\u00e9todos Principais"},{"location":"classes/#renderpaymentformpaymentrequest-request-string","text":"Gera o HTML completo de submiss\u00e3o para o gateway. echo $client->renderPaymentForm($request);","title":"renderPaymentForm(PaymentRequest $request): string"},{"location":"classes/#processresponsearray-postdata-paymentresult","text":"Processa e valida os dados recebidos no callback do Vinti4Net. $result = $client->processResponse($_POST);","title":"processResponse(array $postData): PaymentResult"},{"location":"classes/#createservicepaymentfloat-amount-string-responseurl-string-entitycode-string-referencenumber-paymentrequest","text":"Cria uma requisi\u00e7\u00e3o de Pagamento de Servi\u00e7o .","title":"createServicePayment(float $amount, string $responseUrl, string $entityCode, string $referenceNumber): PaymentRequest"},{"location":"classes/#createrechargepaymentfloat-amount-string-responseurl-string-entitycode-string-referencenumber-paymentrequest","text":"Cria uma requisi\u00e7\u00e3o de Recarga .","title":"createRechargePayment(float $amount, string $responseUrl, string $entityCode, string $referenceNumber): PaymentRequest"},{"location":"classes/#verifyfingerprintarray-data-string-fingerprint-bool","text":"Valida a integridade de um Fingerprint recebido do gateway.","title":"verifyFingerprint(array $data, string $fingerprint): bool"},{"location":"classes/#exemplo-completo","text":"$client = new PaymentClient('90000443', 'ABCDE12345'); $request = $client->createServicePayment(500, 'https://meusite.cv/callback', '123', '987654'); echo $client->renderPaymentForm($request); --- ### `docs/classes/PaymentRequest.md` ```markdown # \ud83e\uddfe Classe: `PaymentRequest` Objeto DTO (Data Transfer Object) que encapsula os dados de uma transa\u00e7\u00e3o. --- ## \ud83e\udde9 Namespace ```php use Erilshk\\Vinti4Net\\PaymentRequest;","title":"\u2699\ufe0f Exemplo Completo"},{"location":"classes/#construtor_1","text":"__construct(int|float|string $amount, string $responseUrl, int|string $transactionCode) Par\u00e2metro Tipo Descri\u00e7\u00e3o $amount float string Valor da transa\u00e7\u00e3o $responseUrl string URL que receber\u00e1 o POST de retorno $transactionCode string int Tipo da transa\u00e7\u00e3o: 1 (Compra), 2 (Servi\u00e7o), 3 (Recarga)","title":"\ud83d\udd27 Construtor"},{"location":"classes/#propriedades","text":"Propriedade Tipo Descri\u00e7\u00e3o $amount string Valor da transa\u00e7\u00e3o $transactionCode string Tipo da transa\u00e7\u00e3o $responseUrl string URL de callback $merchantRef string Refer\u00eancia \u00fanica da loja $merchantSession string Sess\u00e3o \u00fanica da loja $entityCode ?string C\u00f3digo da entidade (Servi\u00e7os/Recarga) $referenceNumber ?string N\u00famero de refer\u00eancia $billingData array Dados de cobran\u00e7a (3DS)","title":"\ud83e\uddf1 Propriedades"},{"location":"classes/#metodos","text":"","title":"\ud83e\udde9 M\u00e9todos"},{"location":"classes/#setbillingstring-email-string-country-string-city-string-address-string-postalcode-array-acctinfo-array-aditionals-self","text":"Define os dados de cobran\u00e7a para 3D Secure. $request->setBilling( 'cliente@exemplo.com', '132', 'Praia', 'Av. Cidade de Lisboa, 12', '7600' ); --- ### `docs/classes/PaymentResult.md` ```markdown # \ud83d\udcc4 Classe: `PaymentResult` DTO para padronizar o resultado do processamento da resposta do Vinti4Net. --- ## \ud83e\udde9 Namespace ```php use Erilshk\\Vinti4Net\\PaymentResult;","title":"setBilling(string $email, string $country, string $city, string $address, string $postalCode, array $acctInfo = [], array $aditionals = []): self"},{"location":"classes/#construtor_2","text":"__construct(string $status, string $message, bool $isSuccessful, array $data, array $debugInfo = [])","title":"\ud83d\udd27 Construtor"},{"location":"classes/#propriedades_1","text":"Nome Tipo Descri\u00e7\u00e3o $status string Status da transa\u00e7\u00e3o $message string Mensagem do sistema $isSuccessful bool Indica se o pagamento foi bem-sucedido $data array Dados brutos da resposta $debugInfo array Informa\u00e7\u00f5es internas \u00fateis para log","title":"\ud83e\uddf1 Propriedades"},{"location":"classes/#metodos_1","text":"","title":"\ud83d\udea6 M\u00e9todos"},{"location":"classes/#isvalid-bool","text":"Verifica se o status \u00e9 reconhecido.","title":"isValid(): bool"},{"location":"classes/#succeeded-bool","text":"Retorna true se a transa\u00e7\u00e3o foi bem-sucedida.","title":"succeeded(): bool"},{"location":"classes/#failed-bool","text":"Retorna true se a transa\u00e7\u00e3o falhou.","title":"failed(): bool"},{"location":"classes/#generatereceipt-string","text":"Gera um HTML simples com o recibo do pagamento. echo $result->generateReceipt(); --- ### `docs/classes/Fingerprint.md` ```markdown # \ud83d\udd10 Classe: `Fingerprint` Classe utilit\u00e1ria para gera\u00e7\u00e3o e valida\u00e7\u00e3o de fingerprints. --- ## \ud83e\udde9 Namespace ```php use Erilshk\\Vinti4Net\\Fingerprint;","title":"generateReceipt(): string"},{"location":"classes/#metodos_2","text":"","title":"\ud83e\udde9 M\u00e9todos"},{"location":"classes/#generatearray-fields-string-posautcode-string","text":"Gera o hash FingerPrint para envio de requisi\u00e7\u00e3o.","title":"generate(array $fields, string $posAutCode): string"},{"location":"classes/#validatearray-fields-string-posautcode-string-received-bool","text":"Valida um fingerprint recebido no callback. $isValid = Fingerprint::validate($_POST, 'SEU_POS_AUT_CODE', $_POST['FingerPrint']); --- ### `docs/classes/Exceptions.md` ```markdown # \u26a0\ufe0f Exce\u00e7\u00f5es O SDK lan\u00e7a exce\u00e7\u00f5es espec\u00edficas para diferenciar erros de dados e falhas internas. --- ## `ValidationException` > Namespace: `Erilshk\\Vinti4Net\\Exception\\ValidationException` Lan\u00e7ada quando campos obrigat\u00f3rios est\u00e3o ausentes ou incorretos. ```php throw new ValidationException(\"BillingData ausente para transa\u00e7\u00e3o de compra.\");","title":"validate(array $fields, string $posAutCode, string $received): bool"},{"location":"classes/#paymentexception","text":"Namespace: Erilshk\\Vinti4Net\\Exception\\PaymentException Lan\u00e7ada em falhas internas do SDK, como erro ao gerar Fingerprint ou codificar JSON. --- Se quiser, posso agora **gerar o `mkdocs.yml` completo** com menu hier\u00e1rquico: - \u201cGuia R\u00e1pido\u201d (Compra, Recarga, etc.) - \u201cRefer\u00eancia de Classes\u201d (PaymentClient, Request, Result, etc.) Quer que eu monte o `mkdocs.yml` com tudo pronto e bonito (com Material for MkDocs)?","title":"PaymentException"},{"location":"compra/","text":"\ud83d\udcb3 Compra (Purchase) Transa\u00e7\u00f5es de Compra (TransactionCode = '1') utilizam 3D Secure e exigem dados de billing . 1\ufe0f\u20e3 Criando a Requisi\u00e7\u00e3o use Erilshk\\Vinti4Net\\PaymentClient; $client = new PaymentClient(posId: 'VINTI4_POS_ID', posAutCode: 'VINTI4_POS_AUTCODE'); $request = $client->createPurchasePayment(amount: 250.00, responseUrl: 'https://seuapp.cv/processar-vinti4-callback'); $request->setMerchantRef('ORDER-'.time()); // opcional // Dados de Billing obrigat\u00f3rios $request->setBilling( email: 'cliente@exemplo.com', country: '132', city: 'Mindelo', address: 'Rua Am\u00edlcar Cabral, 10', postalCode: '2110' ); 2\ufe0f\u20e3 Renderizando o Formul\u00e1rio echo $client->renderPaymentForm($request); exit; O formul\u00e1rio ir\u00e1 se auto-submeter para o Vinti4Net Gateway.","title":"Compra"},{"location":"compra/#compra-purchase","text":"Transa\u00e7\u00f5es de Compra (TransactionCode = '1') utilizam 3D Secure e exigem dados de billing .","title":"\ud83d\udcb3 Compra (Purchase)"},{"location":"compra/#1-criando-a-requisicao","text":"use Erilshk\\Vinti4Net\\PaymentClient; $client = new PaymentClient(posId: 'VINTI4_POS_ID', posAutCode: 'VINTI4_POS_AUTCODE'); $request = $client->createPurchasePayment(amount: 250.00, responseUrl: 'https://seuapp.cv/processar-vinti4-callback'); $request->setMerchantRef('ORDER-'.time()); // opcional // Dados de Billing obrigat\u00f3rios $request->setBilling( email: 'cliente@exemplo.com', country: '132', city: 'Mindelo', address: 'Rua Am\u00edlcar Cabral, 10', postalCode: '2110' );","title":"1\ufe0f\u20e3 Criando a Requisi\u00e7\u00e3o"},{"location":"compra/#2-renderizando-o-formulario","text":"echo $client->renderPaymentForm($request); exit; O formul\u00e1rio ir\u00e1 se auto-submeter para o Vinti4Net Gateway.","title":"2\ufe0f\u20e3 Renderizando o Formul\u00e1rio"},{"location":"installation/","text":"\ud83d\ude80 Inicializa\u00e7\u00e3o do Vinti4Net PHP SDK Esta p\u00e1gina mostra como inicializar rapidamente o SDK e preparar o cliente para uso. 1\ufe0f\u20e3 Requisitos e Instala\u00e7\u00e3o PHP >= 8.1 Composer instalado Instale via Composer: composer require erilshk/vinti4net-payment 2\ufe0f\u20e3 Criando o Client <?php require 'vendor/autoload.php'; use Erilshk\\Vinti4Net\\PaymentClient; // Substitua pelas suas credenciais reais $posID = 'SEU_POS_ID'; $posAutCode = 'SEU_POS_AUT_CODE_SECRETO'; $client = new PaymentClient($posID, $posAutCode); // Opcional: URL de teste (Staging) // $client = new PaymentClient($posID, $posAutCode, 'https://staging.vinti4net.cv/'); 3\ufe0f\u20e3 Cria\u00e7\u00e3o de uma transa\u00e7\u00e3o use Erilshk\\Vinti4Net\\PaymentRequest; // Criar o objeto de requisi\u00e7\u00e3o // transitionCode = 1 - compra // transitionCode = 2 - pagamento de servi\u00e7o // transitionCode = 3 - recarga $request = new PaymentRequest(amount: 150, responseUrl: 'https://seuapp.cv/processar-vinti4-callback', transactionCode: 1); /** *? \u00c9 muito recomendado criar a instancia de PaymentRequest por meio da classe PaymentClient * $client = new PaymentClient('VINTI4_POS_ID', 'VINTI4_POS_AUTCODE'); **/ // Adicionar dados de billing (obrigat\u00f3rio para 3DS) $request->setBilling( email: 'cliente@exemplo.com', country: '132', // C\u00f3digo do pa\u00eds CV city: 'Praia', address: 'Av. Cidade de Lisboa, 12', postalCode: '7600' ); // Renderizar formul\u00e1rio e redirecionar echo $client->renderPaymentForm($request); exit; 4\ufe0f\u20e3 Pr\u00f3ximos passos Configurar callback URL para processar a resposta do Vinti4Net. Criar p\u00e1ginas para Servi\u00e7o e Recarga . Consultar se\u00e7\u00f5es de Tratamento de Erros e Exce\u00e7\u00f5es .","title":"Instala\u00e7\u00e3o"},{"location":"installation/#inicializacao-do-vinti4net-php-sdk","text":"Esta p\u00e1gina mostra como inicializar rapidamente o SDK e preparar o cliente para uso.","title":"\ud83d\ude80 Inicializa\u00e7\u00e3o do Vinti4Net PHP SDK"},{"location":"installation/#1-requisitos-e-instalacao","text":"PHP >= 8.1 Composer instalado Instale via Composer: composer require erilshk/vinti4net-payment","title":"1\ufe0f\u20e3 Requisitos e Instala\u00e7\u00e3o"},{"location":"installation/#2-criando-o-client","text":"<?php require 'vendor/autoload.php'; use Erilshk\\Vinti4Net\\PaymentClient; // Substitua pelas suas credenciais reais $posID = 'SEU_POS_ID'; $posAutCode = 'SEU_POS_AUT_CODE_SECRETO'; $client = new PaymentClient($posID, $posAutCode); // Opcional: URL de teste (Staging) // $client = new PaymentClient($posID, $posAutCode, 'https://staging.vinti4net.cv/');","title":"2\ufe0f\u20e3 Criando o Client"},{"location":"installation/#3-criacao-de-uma-transacao","text":"use Erilshk\\Vinti4Net\\PaymentRequest; // Criar o objeto de requisi\u00e7\u00e3o // transitionCode = 1 - compra // transitionCode = 2 - pagamento de servi\u00e7o // transitionCode = 3 - recarga $request = new PaymentRequest(amount: 150, responseUrl: 'https://seuapp.cv/processar-vinti4-callback', transactionCode: 1); /** *? \u00c9 muito recomendado criar a instancia de PaymentRequest por meio da classe PaymentClient * $client = new PaymentClient('VINTI4_POS_ID', 'VINTI4_POS_AUTCODE'); **/ // Adicionar dados de billing (obrigat\u00f3rio para 3DS) $request->setBilling( email: 'cliente@exemplo.com', country: '132', // C\u00f3digo do pa\u00eds CV city: 'Praia', address: 'Av. Cidade de Lisboa, 12', postalCode: '7600' ); // Renderizar formul\u00e1rio e redirecionar echo $client->renderPaymentForm($request); exit;","title":"3\ufe0f\u20e3 Cria\u00e7\u00e3o de uma transa\u00e7\u00e3o"},{"location":"installation/#4-proximos-passos","text":"Configurar callback URL para processar a resposta do Vinti4Net. Criar p\u00e1ginas para Servi\u00e7o e Recarga . Consultar se\u00e7\u00f5es de Tratamento de Erros e Exce\u00e7\u00f5es .","title":"4\ufe0f\u20e3 Pr\u00f3ximos passos"},{"location":"pagamento-servico/","text":"\ud83c\udfe6 Pagamento de Servi\u00e7o Transa\u00e7\u00f5es de Pagamento de Servi\u00e7o (TransactionCode = '2') requerem entityCode e referenceNumber . 1\ufe0f\u20e3 Criando a Requisi\u00e7\u00e3o use Erilshk\\Vinti4Net\\PaymentClient; $client = new PaymentClient(posId: 'VINTI4_POS_ID', posAutCode: 'VINTI4_POS_AUTCODE'); $prequest = $client->createServicePayment( amount: 500.00, responseUrl: 'https://seuapp.cv/processar-vinti4-callback', entityCode: '123', // C\u00f3digo da entidade referenceNumber: '456789' // N\u00famero de refer\u00eancia ); 2\ufe0f\u20e3 Renderizando o Formul\u00e1rio echo $client->renderPaymentForm($prequest); exit; N\u00e3o \u00e9 necess\u00e1rio enviar dados de billing. Por\u00e9m estranhamente a middleware do gateway reclama","title":"Servi\u00e7o"},{"location":"pagamento-servico/#pagamento-de-servico","text":"Transa\u00e7\u00f5es de Pagamento de Servi\u00e7o (TransactionCode = '2') requerem entityCode e referenceNumber .","title":"\ud83c\udfe6 Pagamento de Servi\u00e7o"},{"location":"pagamento-servico/#1-criando-a-requisicao","text":"use Erilshk\\Vinti4Net\\PaymentClient; $client = new PaymentClient(posId: 'VINTI4_POS_ID', posAutCode: 'VINTI4_POS_AUTCODE'); $prequest = $client->createServicePayment( amount: 500.00, responseUrl: 'https://seuapp.cv/processar-vinti4-callback', entityCode: '123', // C\u00f3digo da entidade referenceNumber: '456789' // N\u00famero de refer\u00eancia );","title":"1\ufe0f\u20e3 Criando a Requisi\u00e7\u00e3o"},{"location":"pagamento-servico/#2-renderizando-o-formulario","text":"echo $client->renderPaymentForm($prequest); exit; N\u00e3o \u00e9 necess\u00e1rio enviar dados de billing. Por\u00e9m estranhamente a middleware do gateway reclama","title":"2\ufe0f\u20e3 Renderizando o Formul\u00e1rio"},{"location":"recarga/","text":"\ud83d\udcf1 Recarga Transa\u00e7\u00f5es de Recarga (TransactionCode = '3') requerem entityCode (operadora) e referenceNumber (n\u00famero do telem\u00f3vel). 1\ufe0f\u20e3 Criando a Requisi\u00e7\u00e3o use Erilshk\\Vinti4Net\\PaymentClient; $client = new PaymentClient(posId: 'VINTI4_POS_ID', posAutCode: 'VINTI4_POS_AUTCODE'); $prequest = $client->createRechargePayment( amount: 100.00, responseUrl: 'https://seuapp.cv/processar-vinti4-callback', entityCode: '001', // Operadora referenceNumber: '991234567' // N\u00famero do telem\u00f3vel ); 2\ufe0f\u20e3 Renderizando o Formul\u00e1rio echo $client->renderPaymentForm($prequest); exit; N\u00e3o \u00e9 necess\u00e1rio enviar dados de billing.","title":"Recarga"},{"location":"recarga/#recarga","text":"Transa\u00e7\u00f5es de Recarga (TransactionCode = '3') requerem entityCode (operadora) e referenceNumber (n\u00famero do telem\u00f3vel).","title":"\ud83d\udcf1 Recarga"},{"location":"recarga/#1-criando-a-requisicao","text":"use Erilshk\\Vinti4Net\\PaymentClient; $client = new PaymentClient(posId: 'VINTI4_POS_ID', posAutCode: 'VINTI4_POS_AUTCODE'); $prequest = $client->createRechargePayment( amount: 100.00, responseUrl: 'https://seuapp.cv/processar-vinti4-callback', entityCode: '001', // Operadora referenceNumber: '991234567' // N\u00famero do telem\u00f3vel );","title":"1\ufe0f\u20e3 Criando a Requisi\u00e7\u00e3o"},{"location":"recarga/#2-renderizando-o-formulario","text":"echo $client->renderPaymentForm($prequest); exit; N\u00e3o \u00e9 necess\u00e1rio enviar dados de billing.","title":"2\ufe0f\u20e3 Renderizando o Formul\u00e1rio"},{"location":"classes/payment-client/","text":"Erilshk\\Vinti4Net\\PaymentClient Servi\u00e7o de integra\u00e7\u00e3o com a plataforma de pagamento Vinti4Net . Esta classe encapsula toda a l\u00f3gica de comunica\u00e7\u00e3o com o gateway de pagamentos da Vinti4Net , incluindo: Cria\u00e7\u00e3o de requisi\u00e7\u00f5es de pagamento ( Purchase , Service , Recharge ); Gera\u00e7\u00e3o de FingerPrints (envio e resposta); Gera\u00e7\u00e3o de PurchaseRequest para 3DS; Renderiza\u00e7\u00e3o de formul\u00e1rios HTML para submiss\u00e3o; Valida\u00e7\u00e3o e processamento de callbacks e respostas do gateway. \ud83e\udde9 Namespace Erilshk\\Vinti4Net \ud83d\udce6 Pacote erilshk/vinti4net-payment \u2696\ufe0f Licen\u00e7a MIT \u00a9 2025 Eril TS \ud83c\udfd7\ufe0f Classe: PaymentClient Descri\u00e7\u00e3o Gerencia todo o ciclo de vida de uma transa\u00e7\u00e3o Vinti4Net, desde a cria\u00e7\u00e3o da requisi\u00e7\u00e3o at\u00e9 o processamento do retorno. Depend\u00eancias PaymentRequest PaymentResult PaymentException ValidationException \ud83d\ude80 Construtor __construct(string $posID, string $posAutCode, ?string $endpoint = null) Inicializa o cliente de pagamentos. Par\u00e2metro Tipo Descri\u00e7\u00e3o $posID string C\u00f3digo do Ponto de Venda (POS). $posAutCode string C\u00f3digo secreto de autoriza\u00e7\u00e3o. $endpoint string | null URL do gateway (opcional, usa o padr\u00e3o DEFAULT_BASE_URL ). \u2699\ufe0f Constantes Nome Valor Descri\u00e7\u00e3o DEFAULT_BASE_URL https://mc.vinti4net.cv/BizMPIOnUs/CardPayment URL padr\u00e3o do gateway. TRANSACTION_TYPE_PURCHASE '1' Transa\u00e7\u00e3o de compra. TRANSACTION_TYPE_SERVICE_PAYMENT '2' Pagamento de servi\u00e7o. TRANSACTION_TYPE_RECHARGE '3' Recarga. CURRENCY_CVE '132' C\u00f3digo ISO do Escudo Cabo-verdiano. SUCCESS_MESSAGE_TYPES ['8', '10', 'P', 'M'] Tipos de mensagens consideradas sucesso. \ud83d\udcb3 M\u00e9todos P\u00fablicos createPurchasePayment(float $amount, string $responseUrl, array $extra = []): PaymentRequest Cria um objeto de requisi\u00e7\u00e3o para uma Compra (Purchase) . O billingData deve ser definido separadamente via setBilling() . Exemplo: $client = new PaymentClient('90000443', 'ABC12345'); $request = $client->createPurchasePayment(1000, 'https://site/callback'); $request->setBilling([ 'billAddrCountry' => 'CV', 'billAddrCity' => 'Praia', 'billAddrLine1' => 'Avenida Principal', 'billAddrPostCode' => '7600', 'email' => 'cliente@example.com' ]); echo $client->renderPaymentForm($request); createServicePayment(float $amount, string $responseUrl, string $entityCode, string $referenceNumber, array $extra = []): PaymentRequest Cria uma requisi\u00e7\u00e3o para Pagamento de Servi\u00e7o . Exemplo: $req = $client->createServicePayment(1500, 'https://site/callback', '3100', '12345678'); createRechargePayment(float $amount, string $responseUrl, string $entityCode, string $referenceNumber, array $extra = []): PaymentRequest Cria uma requisi\u00e7\u00e3o de Recarga (ex: telem\u00f3vel). Exemplo: $req = $client->createRechargePayment(500, 'https://site/callback', '3010', '9812345'); renderPaymentForm(PaymentRequest $prequest): string Renderiza um formul\u00e1rio HTML de auto-submiss\u00e3o ao gateway. Retorno Tipo Descri\u00e7\u00e3o HTML string C\u00f3digo HTML pronto para submiss\u00e3o autom\u00e1tica. processResponse(array $postData): PaymentResult Valida e interpreta a resposta (callback) enviada pelo gateway. Par\u00e2metro Tipo Descri\u00e7\u00e3o $postData array Dados POST do callback ( $_POST ). Retorno Tipo Descri\u00e7\u00e3o PaymentResult object Objeto contendo status, mensagem e dados da transa\u00e7\u00e3o. Poss\u00edveis Status: SUCCESS \u2014 Transa\u00e7\u00e3o conclu\u00edda e FingerPrint v\u00e1lido; FINGERPRINT_INVALIDO \u2014 Erro de seguran\u00e7a na verifica\u00e7\u00e3o; CANCELLED \u2014 Cancelamento pelo utilizador; FAILURE \u2014 Rejei\u00e7\u00e3o pela entidade emissora; ERROR \u2014 Falha de comunica\u00e7\u00e3o ou erro desconhecido. \ud83d\udd12 M\u00e9todos Protegidos generateRequestFingerPrint(array $data): string Gera o FingerPrint da requisi\u00e7\u00e3o (envio). generateSuccessfulResponseFingerPrint(array $data): string Gera o FingerPrint de uma resposta (callback) bem-sucedida. generatePurchaseRequest(array $billingData): string Gera o PurchaseRequest para 3DS em Base64 (valida\u00e7\u00e3o forte). processPaymentRequest(PaymentRequest $prequest): array Monta o payload completo com postUrl e fields . \ud83e\uddfe Exemplo Completo use Erilshk\\Vinti4Net\\PaymentClient; $client = new PaymentClient('90000443', 'XYZSECRET'); // Criar pagamento de compra $request = $client->createPurchasePayment(2500, 'https://meusite.com/callback'); // Dados de cobran\u00e7a obrigat\u00f3rios $request->setBilling([ 'billAddrCountry' => 'CV', 'billAddrCity' => 'Praia', 'billAddrLine1' => 'Avenida Central', 'billAddrPostCode' => '7600', 'email' => 'cliente@exemplo.cv' ]); // Renderizar o formul\u00e1rio HTML para submiss\u00e3o echo $client->renderPaymentForm($request); \ud83e\udde0 Observa\u00e7\u00f5es Importantes O valor ( amount ) deve ser informado em unidades inteiras (Ex: 1000 = 1000 CVE). Internamente, o sistema converte para mil\u00e9simos conforme exigido pela Vinti4Net. Sempre valide o FingerPrint no retorno (isso j\u00e1 \u00e9 feito automaticamente por processResponse() ). Em ambiente de testes , use endpoints pr\u00f3prios disponibilizados pela Vinti4Net.","title":"PaymentClient"},{"location":"classes/payment-client/#erilshkvinti4netpaymentclient","text":"Servi\u00e7o de integra\u00e7\u00e3o com a plataforma de pagamento Vinti4Net . Esta classe encapsula toda a l\u00f3gica de comunica\u00e7\u00e3o com o gateway de pagamentos da Vinti4Net , incluindo: Cria\u00e7\u00e3o de requisi\u00e7\u00f5es de pagamento ( Purchase , Service , Recharge ); Gera\u00e7\u00e3o de FingerPrints (envio e resposta); Gera\u00e7\u00e3o de PurchaseRequest para 3DS; Renderiza\u00e7\u00e3o de formul\u00e1rios HTML para submiss\u00e3o; Valida\u00e7\u00e3o e processamento de callbacks e respostas do gateway.","title":"Erilshk\\Vinti4Net\\PaymentClient"},{"location":"classes/payment-client/#namespace","text":"Erilshk\\Vinti4Net","title":"\ud83e\udde9 Namespace"},{"location":"classes/payment-client/#pacote","text":"erilshk/vinti4net-payment","title":"\ud83d\udce6 Pacote"},{"location":"classes/payment-client/#licenca","text":"MIT \u00a9 2025 Eril TS","title":"\u2696\ufe0f Licen\u00e7a"},{"location":"classes/payment-client/#classe-paymentclient","text":"","title":"\ud83c\udfd7\ufe0f Classe: PaymentClient"},{"location":"classes/payment-client/#descricao","text":"Gerencia todo o ciclo de vida de uma transa\u00e7\u00e3o Vinti4Net, desde a cria\u00e7\u00e3o da requisi\u00e7\u00e3o at\u00e9 o processamento do retorno.","title":"Descri\u00e7\u00e3o"},{"location":"classes/payment-client/#dependencias","text":"PaymentRequest PaymentResult PaymentException ValidationException","title":"Depend\u00eancias"},{"location":"classes/payment-client/#construtor","text":"","title":"\ud83d\ude80 Construtor"},{"location":"classes/payment-client/#__constructstring-posid-string-posautcode-string-endpoint-null","text":"Inicializa o cliente de pagamentos. Par\u00e2metro Tipo Descri\u00e7\u00e3o $posID string C\u00f3digo do Ponto de Venda (POS). $posAutCode string C\u00f3digo secreto de autoriza\u00e7\u00e3o. $endpoint string | null URL do gateway (opcional, usa o padr\u00e3o DEFAULT_BASE_URL ).","title":"__construct(string $posID, string $posAutCode, ?string $endpoint = null)"},{"location":"classes/payment-client/#constantes","text":"Nome Valor Descri\u00e7\u00e3o DEFAULT_BASE_URL https://mc.vinti4net.cv/BizMPIOnUs/CardPayment URL padr\u00e3o do gateway. TRANSACTION_TYPE_PURCHASE '1' Transa\u00e7\u00e3o de compra. TRANSACTION_TYPE_SERVICE_PAYMENT '2' Pagamento de servi\u00e7o. TRANSACTION_TYPE_RECHARGE '3' Recarga. CURRENCY_CVE '132' C\u00f3digo ISO do Escudo Cabo-verdiano. SUCCESS_MESSAGE_TYPES ['8', '10', 'P', 'M'] Tipos de mensagens consideradas sucesso.","title":"\u2699\ufe0f Constantes"},{"location":"classes/payment-client/#metodos-publicos","text":"","title":"\ud83d\udcb3 M\u00e9todos P\u00fablicos"},{"location":"classes/payment-client/#createpurchasepaymentfloat-amount-string-responseurl-array-extra-paymentrequest","text":"Cria um objeto de requisi\u00e7\u00e3o para uma Compra (Purchase) . O billingData deve ser definido separadamente via setBilling() . Exemplo: $client = new PaymentClient('90000443', 'ABC12345'); $request = $client->createPurchasePayment(1000, 'https://site/callback'); $request->setBilling([ 'billAddrCountry' => 'CV', 'billAddrCity' => 'Praia', 'billAddrLine1' => 'Avenida Principal', 'billAddrPostCode' => '7600', 'email' => 'cliente@example.com' ]); echo $client->renderPaymentForm($request);","title":"createPurchasePayment(float $amount, string $responseUrl, array $extra = []): PaymentRequest"},{"location":"classes/payment-client/#createservicepaymentfloat-amount-string-responseurl-string-entitycode-string-referencenumber-array-extra-paymentrequest","text":"Cria uma requisi\u00e7\u00e3o para Pagamento de Servi\u00e7o . Exemplo: $req = $client->createServicePayment(1500, 'https://site/callback', '3100', '12345678');","title":"createServicePayment(float $amount, string $responseUrl, string $entityCode, string $referenceNumber, array $extra = []): PaymentRequest"},{"location":"classes/payment-client/#createrechargepaymentfloat-amount-string-responseurl-string-entitycode-string-referencenumber-array-extra-paymentrequest","text":"Cria uma requisi\u00e7\u00e3o de Recarga (ex: telem\u00f3vel). Exemplo: $req = $client->createRechargePayment(500, 'https://site/callback', '3010', '9812345');","title":"createRechargePayment(float $amount, string $responseUrl, string $entityCode, string $referenceNumber, array $extra = []): PaymentRequest"},{"location":"classes/payment-client/#renderpaymentformpaymentrequest-prequest-string","text":"Renderiza um formul\u00e1rio HTML de auto-submiss\u00e3o ao gateway. Retorno Tipo Descri\u00e7\u00e3o HTML string C\u00f3digo HTML pronto para submiss\u00e3o autom\u00e1tica.","title":"renderPaymentForm(PaymentRequest $prequest): string"},{"location":"classes/payment-client/#processresponsearray-postdata-paymentresult","text":"Valida e interpreta a resposta (callback) enviada pelo gateway. Par\u00e2metro Tipo Descri\u00e7\u00e3o $postData array Dados POST do callback ( $_POST ). Retorno Tipo Descri\u00e7\u00e3o PaymentResult object Objeto contendo status, mensagem e dados da transa\u00e7\u00e3o. Poss\u00edveis Status: SUCCESS \u2014 Transa\u00e7\u00e3o conclu\u00edda e FingerPrint v\u00e1lido; FINGERPRINT_INVALIDO \u2014 Erro de seguran\u00e7a na verifica\u00e7\u00e3o; CANCELLED \u2014 Cancelamento pelo utilizador; FAILURE \u2014 Rejei\u00e7\u00e3o pela entidade emissora; ERROR \u2014 Falha de comunica\u00e7\u00e3o ou erro desconhecido.","title":"processResponse(array $postData): PaymentResult"},{"location":"classes/payment-client/#metodos-protegidos","text":"","title":"\ud83d\udd12 M\u00e9todos Protegidos"},{"location":"classes/payment-client/#generaterequestfingerprintarray-data-string","text":"Gera o FingerPrint da requisi\u00e7\u00e3o (envio).","title":"generateRequestFingerPrint(array $data): string"},{"location":"classes/payment-client/#generatesuccessfulresponsefingerprintarray-data-string","text":"Gera o FingerPrint de uma resposta (callback) bem-sucedida.","title":"generateSuccessfulResponseFingerPrint(array $data): string"},{"location":"classes/payment-client/#generatepurchaserequestarray-billingdata-string","text":"Gera o PurchaseRequest para 3DS em Base64 (valida\u00e7\u00e3o forte).","title":"generatePurchaseRequest(array $billingData): string"},{"location":"classes/payment-client/#processpaymentrequestpaymentrequest-prequest-array","text":"Monta o payload completo com postUrl e fields .","title":"processPaymentRequest(PaymentRequest $prequest): array"},{"location":"classes/payment-client/#exemplo-completo","text":"use Erilshk\\Vinti4Net\\PaymentClient; $client = new PaymentClient('90000443', 'XYZSECRET'); // Criar pagamento de compra $request = $client->createPurchasePayment(2500, 'https://meusite.com/callback'); // Dados de cobran\u00e7a obrigat\u00f3rios $request->setBilling([ 'billAddrCountry' => 'CV', 'billAddrCity' => 'Praia', 'billAddrLine1' => 'Avenida Central', 'billAddrPostCode' => '7600', 'email' => 'cliente@exemplo.cv' ]); // Renderizar o formul\u00e1rio HTML para submiss\u00e3o echo $client->renderPaymentForm($request);","title":"\ud83e\uddfe Exemplo Completo"},{"location":"classes/payment-client/#observacoes-importantes","text":"O valor ( amount ) deve ser informado em unidades inteiras (Ex: 1000 = 1000 CVE). Internamente, o sistema converte para mil\u00e9simos conforme exigido pela Vinti4Net. Sempre valide o FingerPrint no retorno (isso j\u00e1 \u00e9 feito automaticamente por processResponse() ). Em ambiente de testes , use endpoints pr\u00f3prios disponibilizados pela Vinti4Net.","title":"\ud83e\udde0 Observa\u00e7\u00f5es Importantes"},{"location":"classes/payment-request/","text":"Erilshk\\Vinti4Net\\PaymentRequest DTO (Data Transfer Object) respons\u00e1vel por encapsular todos os dados de uma transa\u00e7\u00e3o no Vinti4Net Payment Gateway . Esta classe \u00e9 utilizada para transportar e validar informa\u00e7\u00f5es entre a cria\u00e7\u00e3o da requisi\u00e7\u00e3o e o envio ao gateway, garantindo consist\u00eancia dos dados e suporte a 3D Secure (3DS) quando aplic\u00e1vel. \ud83e\udde9 Namespace Erilshk\\Vinti4Net \ud83d\udce6 Pacote erilshk/vinti4net-payment \ud83c\udfd7\ufe0f Classe: PaymentRequest Descri\u00e7\u00e3o Representa uma requisi\u00e7\u00e3o de pagamento, contendo informa\u00e7\u00f5es sobre o valor, tipo de transa\u00e7\u00e3o, URLs de resposta, e dados de cobran\u00e7a (billing). Geralmente, \u00e9 criada atrav\u00e9s de m\u00e9todos da classe PaymentClient , mas tamb\u00e9m pode ser instanciada manualmente em casos espec\u00edficos. \ud83d\udd27 Propriedades Propriedade Tipo Padr\u00e3o Descri\u00e7\u00e3o $amount string \u2014 Valor da transa\u00e7\u00e3o (ex: \"1000.50\" ). $transactionCode string \u2014 C\u00f3digo da transa\u00e7\u00e3o: '1' = Compra, '2' = Pagamento de Servi\u00e7o, '3' = Recarga. $responseUrl string \u2014 URL de callback para retorno da transa\u00e7\u00e3o. $merchantRef string '' Refer\u00eancia \u00fanica da transa\u00e7\u00e3o no sistema do comerciante. $merchantSession string '' Identificador \u00fanico de sess\u00e3o do comerciante. $entityCode string | null null C\u00f3digo da Entidade (para Pagamentos de Servi\u00e7o/Recarga). $referenceNumber string | null null N\u00famero de refer\u00eancia (para Pagamentos de Servi\u00e7o/Recarga). $languageMessages string 'pt' C\u00f3digo de idioma da interface/mensagens. $currency string '132' C\u00f3digo ISO da moeda (132 = CVE). $billingData array<string, mixed> [] Dados de cobran\u00e7a (3DS) e campos adicionais. \ud83e\udde0 Constantes Relevantes Esta classe n\u00e3o define constantes pr\u00f3prias, mas utiliza os valores definidos em PaymentClient : TRANSACTION_TYPE_PURCHASE = '1' TRANSACTION_TYPE_SERVICE_PAYMENT = '2' TRANSACTION_TYPE_RECHARGE = '3' \ud83d\ude80 Construtor __construct(int|float|string $amount, string $responseUrl, int|string $transactionCode) Cria uma nova inst\u00e2ncia de PaymentRequest . Par\u00e2metro Tipo Descri\u00e7\u00e3o $amount int \\| float \\| string Valor da transa\u00e7\u00e3o (ex: 1000.50 ). $responseUrl string URL de callback para onde o gateway enviar\u00e1 o resultado. $transactionCode int \\| string Tipo da transa\u00e7\u00e3o (1, 2 ou 3). Exemplo: use Erilshk\\Vinti4Net\\PaymentRequest; $request = new PaymentRequest(1500, 'https://site.com/callback', 1); $request->merchantRef = 'ORDER-001'; $request->merchantSession = 'SESSION-ABC123'; \ud83d\udcb3 M\u00e9todos P\u00fablicos setBilling(string $email, string $country, string $city, string $address, string $postalCode, array $acctInfo = [], array $aditionals = []): self Define os dados de cobran\u00e7a (billing), obrigat\u00f3rios para transa\u00e7\u00f5es de Compra (3DS) . Par\u00e2metro Tipo Descri\u00e7\u00e3o $email string Email do titular do cart\u00e3o. $country string C\u00f3digo do pa\u00eds (ex: '132' para Cabo Verde). $city string Cidade. $address string Endere\u00e7o principal (linha 1). $postalCode string C\u00f3digo postal. $acctInfo array<string, mixed> Informa\u00e7\u00f5es opcionais da conta (ex: chAccAgeInd , chAccChange , chAccPwChangeInd ). $aditionals array<string, mixed> Campos adicionais (ex: addrMatch , shipAddrLine2 , shipAddrState ). Retorna: self \u2014 permite encadeamento de m\u00e9todos. Exemplo: $request->setBilling( email: 'cliente@exemplo.com', country: '132', city: 'Praia', address: 'Av. Cidade de Lisboa, 12', postalCode: '7600' ); addBillingExtras(array $extra): self Adiciona dados extras opcionais de billing sem sobrescrever os j\u00e1 definidos. Par\u00e2metro Tipo Descri\u00e7\u00e3o $extra array<string, mixed> Campos adicionais de cobran\u00e7a. Exemplo: $request->addBillingExtras([ 'shipAddrLine2' => '2\u00ba Andar', 'shipAddrState' => 'Santiago' ]); \ud83e\uddfe Exemplo Completo use Erilshk\\Vinti4Net\\PaymentRequest; // Cria o objeto de requisi\u00e7\u00e3o $request = new PaymentRequest(1500, 'https://site.com/callback', 1); $request->merchantRef = 'ORDER-20251001'; $request->merchantSession = uniqid('sess_', true); // Define os dados de billing obrigat\u00f3rios (3DS) $request->setBilling( email: 'cliente@exemplo.cv', country: '132', city: 'Praia', address: 'Avenida Cidade de Lisboa, 12', postalCode: '7600', aditionals: [ 'shipAddrLine2' => 'Bairro Palmarejo', 'addrMatch' => 'Y' ]); \ud83d\udcd8 Observa\u00e7\u00f5es O campo billingData deve estar completo apenas para transa\u00e7\u00f5es de Compra (1) . Pagamentos de servi\u00e7o e recargas n\u00e3o exigem esse preenchimento. A propriedade currency tem valor padr\u00e3o 132 (CVE), mas pode ser alterada conforme necess\u00e1rio. Essa classe \u00e9 imut\u00e1vel nas propriedades principais ( readonly ) \u2014 o valor, tipo e URL s\u00e3o definidos no construtor e n\u00e3o podem ser alterados depois.","title":"PaymentRequest"},{"location":"classes/payment-request/#erilshkvinti4netpaymentrequest","text":"DTO (Data Transfer Object) respons\u00e1vel por encapsular todos os dados de uma transa\u00e7\u00e3o no Vinti4Net Payment Gateway . Esta classe \u00e9 utilizada para transportar e validar informa\u00e7\u00f5es entre a cria\u00e7\u00e3o da requisi\u00e7\u00e3o e o envio ao gateway, garantindo consist\u00eancia dos dados e suporte a 3D Secure (3DS) quando aplic\u00e1vel.","title":"Erilshk\\Vinti4Net\\PaymentRequest"},{"location":"classes/payment-request/#namespace","text":"Erilshk\\Vinti4Net","title":"\ud83e\udde9 Namespace"},{"location":"classes/payment-request/#pacote","text":"erilshk/vinti4net-payment","title":"\ud83d\udce6 Pacote"},{"location":"classes/payment-request/#classe-paymentrequest","text":"","title":"\ud83c\udfd7\ufe0f Classe: PaymentRequest"},{"location":"classes/payment-request/#descricao","text":"Representa uma requisi\u00e7\u00e3o de pagamento, contendo informa\u00e7\u00f5es sobre o valor, tipo de transa\u00e7\u00e3o, URLs de resposta, e dados de cobran\u00e7a (billing). Geralmente, \u00e9 criada atrav\u00e9s de m\u00e9todos da classe PaymentClient , mas tamb\u00e9m pode ser instanciada manualmente em casos espec\u00edficos.","title":"Descri\u00e7\u00e3o"},{"location":"classes/payment-request/#propriedades","text":"Propriedade Tipo Padr\u00e3o Descri\u00e7\u00e3o $amount string \u2014 Valor da transa\u00e7\u00e3o (ex: \"1000.50\" ). $transactionCode string \u2014 C\u00f3digo da transa\u00e7\u00e3o: '1' = Compra, '2' = Pagamento de Servi\u00e7o, '3' = Recarga. $responseUrl string \u2014 URL de callback para retorno da transa\u00e7\u00e3o. $merchantRef string '' Refer\u00eancia \u00fanica da transa\u00e7\u00e3o no sistema do comerciante. $merchantSession string '' Identificador \u00fanico de sess\u00e3o do comerciante. $entityCode string | null null C\u00f3digo da Entidade (para Pagamentos de Servi\u00e7o/Recarga). $referenceNumber string | null null N\u00famero de refer\u00eancia (para Pagamentos de Servi\u00e7o/Recarga). $languageMessages string 'pt' C\u00f3digo de idioma da interface/mensagens. $currency string '132' C\u00f3digo ISO da moeda (132 = CVE). $billingData array<string, mixed> [] Dados de cobran\u00e7a (3DS) e campos adicionais.","title":"\ud83d\udd27 Propriedades"},{"location":"classes/payment-request/#constantes-relevantes","text":"Esta classe n\u00e3o define constantes pr\u00f3prias, mas utiliza os valores definidos em PaymentClient : TRANSACTION_TYPE_PURCHASE = '1' TRANSACTION_TYPE_SERVICE_PAYMENT = '2' TRANSACTION_TYPE_RECHARGE = '3'","title":"\ud83e\udde0 Constantes Relevantes"},{"location":"classes/payment-request/#construtor","text":"","title":"\ud83d\ude80 Construtor"},{"location":"classes/payment-request/#__constructintfloatstring-amount-string-responseurl-intstring-transactioncode","text":"Cria uma nova inst\u00e2ncia de PaymentRequest . Par\u00e2metro Tipo Descri\u00e7\u00e3o $amount int \\| float \\| string Valor da transa\u00e7\u00e3o (ex: 1000.50 ). $responseUrl string URL de callback para onde o gateway enviar\u00e1 o resultado. $transactionCode int \\| string Tipo da transa\u00e7\u00e3o (1, 2 ou 3). Exemplo: use Erilshk\\Vinti4Net\\PaymentRequest; $request = new PaymentRequest(1500, 'https://site.com/callback', 1); $request->merchantRef = 'ORDER-001'; $request->merchantSession = 'SESSION-ABC123';","title":"__construct(int|float|string $amount, string $responseUrl, int|string $transactionCode)"},{"location":"classes/payment-request/#metodos-publicos","text":"","title":"\ud83d\udcb3 M\u00e9todos P\u00fablicos"},{"location":"classes/payment-request/#setbillingstring-email-string-country-string-city-string-address-string-postalcode-array-acctinfo-array-aditionals-self","text":"Define os dados de cobran\u00e7a (billing), obrigat\u00f3rios para transa\u00e7\u00f5es de Compra (3DS) . Par\u00e2metro Tipo Descri\u00e7\u00e3o $email string Email do titular do cart\u00e3o. $country string C\u00f3digo do pa\u00eds (ex: '132' para Cabo Verde). $city string Cidade. $address string Endere\u00e7o principal (linha 1). $postalCode string C\u00f3digo postal. $acctInfo array<string, mixed> Informa\u00e7\u00f5es opcionais da conta (ex: chAccAgeInd , chAccChange , chAccPwChangeInd ). $aditionals array<string, mixed> Campos adicionais (ex: addrMatch , shipAddrLine2 , shipAddrState ). Retorna: self \u2014 permite encadeamento de m\u00e9todos. Exemplo: $request->setBilling( email: 'cliente@exemplo.com', country: '132', city: 'Praia', address: 'Av. Cidade de Lisboa, 12', postalCode: '7600' );","title":"setBilling(string $email, string $country, string $city, string $address, string $postalCode, array $acctInfo = [], array $aditionals = []): self"},{"location":"classes/payment-request/#addbillingextrasarray-extra-self","text":"Adiciona dados extras opcionais de billing sem sobrescrever os j\u00e1 definidos. Par\u00e2metro Tipo Descri\u00e7\u00e3o $extra array<string, mixed> Campos adicionais de cobran\u00e7a. Exemplo: $request->addBillingExtras([ 'shipAddrLine2' => '2\u00ba Andar', 'shipAddrState' => 'Santiago' ]);","title":"addBillingExtras(array $extra): self"},{"location":"classes/payment-request/#exemplo-completo","text":"use Erilshk\\Vinti4Net\\PaymentRequest; // Cria o objeto de requisi\u00e7\u00e3o $request = new PaymentRequest(1500, 'https://site.com/callback', 1); $request->merchantRef = 'ORDER-20251001'; $request->merchantSession = uniqid('sess_', true); // Define os dados de billing obrigat\u00f3rios (3DS) $request->setBilling( email: 'cliente@exemplo.cv', country: '132', city: 'Praia', address: 'Avenida Cidade de Lisboa, 12', postalCode: '7600', aditionals: [ 'shipAddrLine2' => 'Bairro Palmarejo', 'addrMatch' => 'Y' ]);","title":"\ud83e\uddfe Exemplo Completo"},{"location":"classes/payment-request/#observacoes","text":"O campo billingData deve estar completo apenas para transa\u00e7\u00f5es de Compra (1) . Pagamentos de servi\u00e7o e recargas n\u00e3o exigem esse preenchimento. A propriedade currency tem valor padr\u00e3o 132 (CVE), mas pode ser alterada conforme necess\u00e1rio. Essa classe \u00e9 imut\u00e1vel nas propriedades principais ( readonly ) \u2014 o valor, tipo e URL s\u00e3o definidos no construtor e n\u00e3o podem ser alterados depois.","title":"\ud83d\udcd8 Observa\u00e7\u00f5es"},{"location":"classes/payment-result/","text":"Classe PaymentResult Namespace: Erilshk\\Vinti4Net Tipo: DTO (Data Transfer Object) Classe respons\u00e1vel por encapsular o resultado de uma transa\u00e7\u00e3o processada pelo gateway Vinti4Net , incluindo status, mensagem, dados brutos da resposta e informa\u00e7\u00f5es de debug. Propriedades Propriedade Tipo Descri\u00e7\u00e3o public string $status string Status da transa\u00e7\u00e3o retornado pelo gateway. public string $message string Mensagem de resultado da transa\u00e7\u00e3o. public bool $isSuccessful bool Indica se a transa\u00e7\u00e3o foi bem-sucedida. public array $data array Dados brutos recebidos do gateway ( $_POST ou equivalente). public array $debugInfo array Informa\u00e7\u00f5es adicionais de debug, como fingerprint calculado/recebido. Constantes de Status Constante Valor Descri\u00e7\u00e3o STATUS_SUCCESS 'SUCCESS' Transa\u00e7\u00e3o conclu\u00edda com sucesso. STATUS_CANCELLED 'CANCELLED' Transa\u00e7\u00e3o cancelada pelo usu\u00e1rio. STATUS_FAILURE 'FAILURE' Falha no processamento da transa\u00e7\u00e3o. STATUS_ERROR 'ERROR' Erro interno ou exce\u00e7\u00e3o. STATUS_FINGERPRINT_INVALID 'FINGERPRINT_INVALIDO' Falha na valida\u00e7\u00e3o do fingerprint. Construtor public function __construct( string $status, string $message, bool $isSuccessful, array $data, array $debugInfo = [] ) Par\u00e2metros: $status \u2013 Status da transa\u00e7\u00e3o. $message \u2013 Mensagem de resultado da transa\u00e7\u00e3o. $isSuccessful \u2013 Verdadeiro se a transa\u00e7\u00e3o foi bem-sucedida. $data \u2013 Dados brutos recebidos do gateway. $debugInfo \u2013 Informa\u00e7\u00f5es adicionais de debug (opcional). M\u00e9todos isValid(): bool Verifica se o status da transa\u00e7\u00e3o \u00e9 v\u00e1lido (SUCCESS, CANCELLED ou FINGERPRINT_INVALIDO). Retorno: true se o status for v\u00e1lido; caso contr\u00e1rio, false . succeeded(): bool Indica se a transa\u00e7\u00e3o foi bem-sucedida. Retorno: true se o status for SUCCESS ; caso contr\u00e1rio, false . failed(): bool Indica se a transa\u00e7\u00e3o falhou. Retorno: true se o status for diferente de SUCCESS ; caso contr\u00e1rio, false . generateReceipt(): string Gera um recibo HTML seguro baseado nos dados da transa\u00e7\u00e3o. Todos os valores s\u00e3o escapados com htmlspecialchars para prevenir ataques XSS. Retorno: HTML do recibo, incluindo: Status da transa\u00e7\u00e3o Montante e moeda Refer\u00eancia e sess\u00e3o do comerciante Mensagem de erro (se houver) Bloco DCC (Dynamic Currency Conversion) se dispon\u00edvel Exemplo de Uso use Erilshk\\Vinti4Net\\PaymentResult; use Erilshk\\Vinti4Net\\PaymentClient; // Suponha que $response seja o array retornado pelo gateway $client = new PaymentClient(posId: 'VINTI4_POS_ID', posAutCode: 'VINTI4_POS_AUTCODE'); $result = $client->processResponse($_POST); if ($result->succeeded()) { echo \"Pagamento realizado com sucesso!\"; } else { echo \"Falha na transa\u00e7\u00e3o: \" . $result->message; } // Gerar recibo HTML echo $result->generateReceipt();","title":"PaymentResult"},{"location":"classes/payment-result/#classe-paymentresult","text":"Namespace: Erilshk\\Vinti4Net Tipo: DTO (Data Transfer Object) Classe respons\u00e1vel por encapsular o resultado de uma transa\u00e7\u00e3o processada pelo gateway Vinti4Net , incluindo status, mensagem, dados brutos da resposta e informa\u00e7\u00f5es de debug.","title":"Classe PaymentResult"},{"location":"classes/payment-result/#propriedades","text":"Propriedade Tipo Descri\u00e7\u00e3o public string $status string Status da transa\u00e7\u00e3o retornado pelo gateway. public string $message string Mensagem de resultado da transa\u00e7\u00e3o. public bool $isSuccessful bool Indica se a transa\u00e7\u00e3o foi bem-sucedida. public array $data array Dados brutos recebidos do gateway ( $_POST ou equivalente). public array $debugInfo array Informa\u00e7\u00f5es adicionais de debug, como fingerprint calculado/recebido.","title":"Propriedades"},{"location":"classes/payment-result/#constantes-de-status","text":"Constante Valor Descri\u00e7\u00e3o STATUS_SUCCESS 'SUCCESS' Transa\u00e7\u00e3o conclu\u00edda com sucesso. STATUS_CANCELLED 'CANCELLED' Transa\u00e7\u00e3o cancelada pelo usu\u00e1rio. STATUS_FAILURE 'FAILURE' Falha no processamento da transa\u00e7\u00e3o. STATUS_ERROR 'ERROR' Erro interno ou exce\u00e7\u00e3o. STATUS_FINGERPRINT_INVALID 'FINGERPRINT_INVALIDO' Falha na valida\u00e7\u00e3o do fingerprint.","title":"Constantes de Status"},{"location":"classes/payment-result/#construtor","text":"public function __construct( string $status, string $message, bool $isSuccessful, array $data, array $debugInfo = [] ) Par\u00e2metros: $status \u2013 Status da transa\u00e7\u00e3o. $message \u2013 Mensagem de resultado da transa\u00e7\u00e3o. $isSuccessful \u2013 Verdadeiro se a transa\u00e7\u00e3o foi bem-sucedida. $data \u2013 Dados brutos recebidos do gateway. $debugInfo \u2013 Informa\u00e7\u00f5es adicionais de debug (opcional).","title":"Construtor"},{"location":"classes/payment-result/#metodos","text":"","title":"M\u00e9todos"},{"location":"classes/payment-result/#isvalid-bool","text":"Verifica se o status da transa\u00e7\u00e3o \u00e9 v\u00e1lido (SUCCESS, CANCELLED ou FINGERPRINT_INVALIDO). Retorno: true se o status for v\u00e1lido; caso contr\u00e1rio, false .","title":"isValid(): bool"},{"location":"classes/payment-result/#succeeded-bool","text":"Indica se a transa\u00e7\u00e3o foi bem-sucedida. Retorno: true se o status for SUCCESS ; caso contr\u00e1rio, false .","title":"succeeded(): bool"},{"location":"classes/payment-result/#failed-bool","text":"Indica se a transa\u00e7\u00e3o falhou. Retorno: true se o status for diferente de SUCCESS ; caso contr\u00e1rio, false .","title":"failed(): bool"},{"location":"classes/payment-result/#generatereceipt-string","text":"Gera um recibo HTML seguro baseado nos dados da transa\u00e7\u00e3o. Todos os valores s\u00e3o escapados com htmlspecialchars para prevenir ataques XSS. Retorno: HTML do recibo, incluindo: Status da transa\u00e7\u00e3o Montante e moeda Refer\u00eancia e sess\u00e3o do comerciante Mensagem de erro (se houver) Bloco DCC (Dynamic Currency Conversion) se dispon\u00edvel","title":"generateReceipt(): string"},{"location":"classes/payment-result/#exemplo-de-uso","text":"use Erilshk\\Vinti4Net\\PaymentResult; use Erilshk\\Vinti4Net\\PaymentClient; // Suponha que $response seja o array retornado pelo gateway $client = new PaymentClient(posId: 'VINTI4_POS_ID', posAutCode: 'VINTI4_POS_AUTCODE'); $result = $client->processResponse($_POST); if ($result->succeeded()) { echo \"Pagamento realizado com sucesso!\"; } else { echo \"Falha na transa\u00e7\u00e3o: \" . $result->message; } // Gerar recibo HTML echo $result->generateReceipt();","title":"Exemplo de Uso"}]}